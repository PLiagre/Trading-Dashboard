@* Composant de graphique des marchés avec rendu WebAssembly pour les interactions *@
@rendermode InteractiveWebAssembly

<div class="market-chart-container">
    <div class="chart-header">
        <select @bind="selectedTimeframe" @oninput="OnTimeframeChanged" class="form-select form-select-sm">
            <option value="1D">1 Jour</option>
            <option value="1W">1 Semaine</option>
            <option value="1M">1 Mois</option>
        </select>
    </div>
    
    <div class="simple-chart">
        @for (int i = 0; i < chartData.Count; i++)
        {
            var point = chartData[i];
            var height = (point.Value - minValue) / (maxValue - minValue) * 100;
            var color = point.Value >= (i > 0 ? chartData[i-1].Value : point.Value) ? "#28a745" : "#dc3545";
            
            <div class="chart-bar" 
                 style="height: @(height)%; background-color: @color;"
                 title="@point.Label: @point.Value.ToString("C2")">
            </div>
        }
    </div>
    
    <div class="chart-labels">
        @foreach (var point in chartData.Take(5))
        {
            <span class="chart-label">@point.Label</span>
        }
    </div>
</div>

<style>
    .market-chart-container {
        background: var(--chart-bg, #f8f9fa);
        border: 1px solid var(--border-color, #dee2e6);
        border-radius: 0.375rem;
        padding: 1rem;
        min-height: 200px;
    }
    
    .chart-header {
        display: flex;
        justify-content: flex-end;
        margin-bottom: 1rem;
    }
    
    .simple-chart {
        display: flex;
        align-items: end;
        height: 120px;
        gap: 2px;
        margin-bottom: 0.5rem;
    }
    
    .chart-bar {
        flex: 1;
        min-height: 4px;
        border-radius: 2px 2px 0 0;
        transition: all 0.3s ease;
    }
    
    .chart-bar:hover {
        opacity: 0.8;
        transform: scaleY(1.05);
    }
    
    .chart-labels {
        display: flex;
        justify-content: space-between;
        font-size: 0.75rem;
        color: var(--text-muted, #6c757d);
    }
</style>

@code {
    private string selectedTimeframe = "1D";
    private List<ChartDataPoint> chartData = new();
    private decimal minValue = 0;
    private decimal maxValue = 100;

    public class ChartDataPoint
    {
        public string Label { get; set; } = string.Empty;
        public decimal Value { get; set; }
    }

    protected override void OnInitialized()
    {
        LoadChartData();
    }

    private void LoadChartData()
    {
        // Génération de données simulées pour le graphique
        var random = new Random();
        var baseValue = 1000m;
        
        chartData = new List<ChartDataPoint>();
        
        for (int i = 0; i < 20; i++)
        {
            var change = (decimal)(random.NextDouble() - 0.5) * 50;
            baseValue += change;
            
            chartData.Add(new ChartDataPoint
            {
                Label = selectedTimeframe switch
                {
                    "1D" => $"{9 + i}h",
                    "1W" => $"J{i + 1}",
                    "1M" => $"S{i + 1}",
                    _ => $"{i}"
                },
                Value = Math.Max(baseValue, 500) // Éviter les valeurs négatives
            });
        }
        
        if (chartData.Any())
        {
            minValue = chartData.Min(x => x.Value);
            maxValue = chartData.Max(x => x.Value);
        }
    }

    private void OnTimeframeChanged(ChangeEventArgs e)
    {
        selectedTimeframe = e.Value?.ToString() ?? "1D";
        LoadChartData();
        StateHasChanged();
    }
} 