@page "/markets"
@inject MarketDataService MarketDataService
@inject IJSRuntime JSRuntime
@implements IDisposable

<PageTitle>March√©s - Trading Dashboard</PageTitle>

<div class="markets-page">
    <div class="markets-header">
        <h1>March√©s financiers</h1>
        <div class="markets-controls">
            <div class="category-filters">
                <button class="filter-btn @GetFilterClass(null)" @onclick="() => SetCategory(null)">
                    üìä Tous
                </button>
                <button class="filter-btn @GetFilterClass(MarketCategory.Indices)" @onclick="() => SetCategory(MarketCategory.Indices)">
                    üìà Indices
                </button>
                <button class="filter-btn @GetFilterClass(MarketCategory.Crypto)" @onclick="() => SetCategory(MarketCategory.Crypto)">
                    ‚Çø Crypto
                </button>
                <button class="filter-btn @GetFilterClass(MarketCategory.Commodities)" @onclick="() => SetCategory(MarketCategory.Commodities)">
                    ü•á Mati√®res premi√®res
                </button>
                <button class="filter-btn @GetFilterClass(MarketCategory.Bonds)" @onclick="() => SetCategory(MarketCategory.Bonds)">
                    üèõÔ∏è Obligations
                </button>
            </div>
            
            <div class="view-controls">
                <button class="view-btn @GetViewClass("grid")" @onclick="() => SetView("grid")">
                    ‚äû Grille
                </button>
                <button class="view-btn @GetViewClass("list")" @onclick="() => SetView("list")">
                    ‚ò∞ Liste
                </button>
            </div>
        </div>
    </div>

    @if (IsLoading)
    {
        <LoadingSpinner Text="Chargement des donn√©es de march√©..." Size="lg" />
    }
    else
    {
        <!-- R√©sum√© de la cat√©gorie s√©lectionn√©e -->
        @if (SelectedCategory.HasValue)
        {
            <div class="category-overview">
                <div class="overview-header">
                    <h2>
                        @GetCategoryIcon(SelectedCategory.Value)
                        @GetCategoryName(SelectedCategory.Value)
                    </h2>
                    <div class="category-stats">
                        <span class="stat">@GetFilteredData().Count actifs</span>
                        <span class="stat">@GetCategoryPerformance() performance moyenne</span>
                    </div>
                </div>
                
                @if (SelectedCategory == MarketCategory.Bonds)
                {
                    <div class="bonds-section">
                        <BondYieldChart 
                            Title="√âvolution des rendements obligataires"
                            BondData="@GetBondData()"
                            HistoricalData="@GetBondHistoricalData()"
                            IsLoading="@IsLoading" />
                    </div>
                }
                else
                {
                    <div class="category-chart">
                        <MultiChart 
                            Title="@GetChartTitle()"
                            ChartData="@GetCategoryChartData()"
                            IsLoading="@IsLoading" />
                    </div>
                }
            </div>
        }

        <!-- Liste/Grille des actifs -->
        <div class="markets-content">
            <div class="content-header">
                <h3>
                    @if (SelectedCategory.HasValue)
                    {
                        <text>@GetCategoryName(SelectedCategory.Value) (@GetFilteredData().Count)</text>
                    }
                    else
                    {
                        <text>Tous les actifs (@GetFilteredData().Count)</text>
                    }
                </h3>
                
                <div class="sort-controls">
                    <select @bind="SortBy" class="form-select">
                        <option value="name">Nom</option>
                        <option value="price">Prix</option>
                        <option value="change">Variation</option>
                        <option value="changePercent">Variation %</option>
                    </select>
                    <button class="sort-direction-btn" @onclick="ToggleSortDirection">
                        @(SortAscending ? "‚Üë" : "‚Üì")
                    </button>
                </div>
            </div>

            <div class="markets-grid @GetViewClass()">
                @foreach (var kvp in GetSortedData())
                {
                    @if (CurrentView == "grid")
                    {
                        <MarketCard Data="kvp.Value" ShowMiniChart="true" OnClick="HandleAssetClick" />
                    }
                    else
                    {
                        <div class="market-list-item @GetListItemClass(kvp.Value)">
                            <div class="asset-info">
                                <div class="asset-primary">
                                    <span class="asset-name">@kvp.Value.Name</span>
                                    <span class="asset-symbol">@kvp.Value.Symbol</span>
                                </div>
                                <div class="asset-category">
                                    @GetCategoryIcon(kvp.Value.Category)
                                    @GetCategoryName(kvp.Value.Category)
                                </div>
                            </div>
                            
                            <div class="asset-price">
                                <span class="price-value">@FormatPrice(kvp.Value.Price) @kvp.Value.Currency</span>
                                <span class="price-change @GetChangeClass(kvp.Value.ChangePercent)">
                                    @GetChangePrefix(kvp.Value.ChangePercent)@kvp.Value.ChangePercent.ToString("F2")%
                                </span>
                            </div>
                            
                            <div class="asset-actions">
                                <button class="btn btn-sm btn-outline-primary" @onclick="() => HandleAssetClick(kvp.Value)">
                                    D√©tails
                                </button>
                            </div>
                        </div>
                    }
                }
            </div>

            @if (!GetFilteredData().Any())
            {
                <div class="no-data">
                    <div class="no-data-content">
                        <div class="no-data-icon">üìä</div>
                        <h4>Aucun actif trouv√©</h4>
                        <p>Aucun actif ne correspond aux crit√®res s√©lectionn√©s.</p>
                        <button class="btn btn-primary" @onclick="() => SetCategory(null)">
                            Voir tous les actifs
                        </button>
                    </div>
                </div>
            }
        </div>
    }
</div>

<style>
    .markets-page {
        padding: 2rem 0;
    }

    .markets-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 2rem;
        flex-wrap: wrap;
        gap: 1rem;
    }

    .markets-header h1 {
        font-size: 2.5rem;
        font-weight: 700;
        color: var(--text-color);
        margin: 0;
    }

    .markets-controls {
        display: flex;
        gap: 2rem;
        align-items: center;
        flex-wrap: wrap;
    }

    .category-filters {
        display: flex;
        gap: 0.5rem;
        flex-wrap: wrap;
    }

    .filter-btn {
        padding: 0.5rem 1rem;
        border: 1px solid var(--border-color);
        background: var(--card-bg);
        color: var(--text-color);
        border-radius: 6px;
        cursor: pointer;
        transition: all 0.2s ease;
        font-size: 0.9rem;
        font-weight: 500;
    }

    .filter-btn:hover {
        background: var(--bg-secondary);
        border-color: var(--primary-color);
    }

    .filter-btn.active {
        background: var(--primary-color);
        color: white;
        border-color: var(--primary-color);
    }

    .view-controls {
        display: flex;
        gap: 0.25rem;
        border: 1px solid var(--border-color);
        border-radius: 6px;
        overflow: hidden;
    }

    .view-btn {
        padding: 0.5rem 0.75rem;
        border: none;
        background: var(--card-bg);
        color: var(--text-color);
        cursor: pointer;
        transition: all 0.2s ease;
        font-size: 0.9rem;
    }

    .view-btn:hover {
        background: var(--bg-secondary);
    }

    .view-btn.active {
        background: var(--primary-color);
        color: white;
    }

    .category-overview {
        background: var(--card-bg);
        border: 1px solid var(--border-color);
        border-radius: 12px;
        padding: 2rem;
        margin-bottom: 2rem;
    }

    .overview-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 2rem;
    }

    .overview-header h2 {
        font-size: 1.75rem;
        font-weight: 600;
        color: var(--text-color);
        margin: 0;
        display: flex;
        align-items: center;
        gap: 0.5rem;
    }

    .category-stats {
        display: flex;
        gap: 1rem;
    }

    .stat {
        padding: 0.5rem 1rem;
        background: var(--bg-secondary);
        border-radius: 6px;
        font-size: 0.9rem;
        font-weight: 500;
        color: var(--text-color);
    }

    .content-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 2rem;
        flex-wrap: wrap;
        gap: 1rem;
    }

    .content-header h3 {
        font-size: 1.5rem;
        font-weight: 600;
        color: var(--text-color);
        margin: 0;
    }

    .sort-controls {
        display: flex;
        gap: 0.5rem;
        align-items: center;
    }

    .form-select {
        padding: 0.5rem;
        border: 1px solid var(--border-color);
        border-radius: 6px;
        background: var(--card-bg);
        color: var(--text-color);
        font-size: 0.9rem;
    }

    .sort-direction-btn {
        padding: 0.5rem 0.75rem;
        border: 1px solid var(--border-color);
        background: var(--card-bg);
        color: var(--text-color);
        border-radius: 6px;
        cursor: pointer;
        font-size: 1.2rem;
        transition: all 0.2s ease;
    }

    .sort-direction-btn:hover {
        background: var(--bg-secondary);
    }

    .markets-grid.grid {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
        gap: 1.5rem;
    }

    .markets-grid.list {
        display: flex;
        flex-direction: column;
        gap: 1rem;
    }

    .market-list-item {
        display: flex;
        justify-content: space-between;
        align-items: center;
        padding: 1.5rem;
        background: var(--card-bg);
        border: 1px solid var(--border-color);
        border-radius: 8px;
        transition: all 0.2s ease;
    }

    .market-list-item:hover {
        transform: translateY(-2px);
        box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
    }

    .market-list-item.positive {
        border-left: 4px solid var(--success-color);
    }

    .market-list-item.negative {
        border-left: 4px solid var(--danger-color);
    }

    .asset-info {
        flex: 1;
    }

    .asset-primary {
        display: flex;
        align-items: center;
        gap: 0.5rem;
        margin-bottom: 0.5rem;
    }

    .asset-name {
        font-weight: 600;
        color: var(--text-color);
        font-size: 1.1rem;
    }

    .asset-symbol {
        background: var(--bg-secondary);
        padding: 0.25rem 0.5rem;
        border-radius: 4px;
        font-size: 0.8rem;
        color: var(--text-muted);
        font-weight: 500;
    }

    .asset-category {
        font-size: 0.9rem;
        color: var(--text-muted);
        display: flex;
        align-items: center;
        gap: 0.25rem;
    }

    .asset-price {
        text-align: center;
        margin: 0 2rem;
    }

    .price-value {
        display: block;
        font-size: 1.2rem;
        font-weight: 700;
        color: var(--text-color);
        margin-bottom: 0.25rem;
    }

    .price-change {
        font-size: 0.9rem;
        font-weight: 600;
    }

    .price-change.positive {
        color: var(--success-color);
    }

    .price-change.negative {
        color: var(--danger-color);
    }

    .price-change.neutral {
        color: var(--text-muted);
    }

    .asset-actions {
        display: flex;
        gap: 0.5rem;
    }

    .no-data {
        display: flex;
        justify-content: center;
        align-items: center;
        min-height: 400px;
    }

    .no-data-content {
        text-align: center;
        max-width: 400px;
    }

    .no-data-icon {
        font-size: 4rem;
        margin-bottom: 1rem;
    }

    .no-data-content h4 {
        font-size: 1.5rem;
        color: var(--text-color);
        margin-bottom: 1rem;
    }

    .no-data-content p {
        color: var(--text-muted);
        margin-bottom: 2rem;
    }

    /* Responsive */
    @media (max-width: 768px) {
        .markets-header {
            flex-direction: column;
            align-items: flex-start;
        }

        .markets-controls {
            width: 100%;
        }

        .category-filters {
            width: 100%;
        }

        .markets-grid.grid {
            grid-template-columns: 1fr;
        }

        .market-list-item {
            flex-direction: column;
            align-items: flex-start;
            gap: 1rem;
        }

        .asset-price {
            margin: 0;
            text-align: left;
            width: 100%;
        }
    }
</style>

@code {
    private Dictionary<string, MarketData> _marketData = new();
    private Dictionary<string, List<ChartPoint>> _historicalData = new();
    private bool IsLoading = true;
    
    // Filtres et tri
    private MarketCategory? SelectedCategory = null;
    private string CurrentView = "grid";
    private string SortBy = "name";
    private bool SortAscending = true;

    protected override async Task OnInitializedAsync()
    {
        await LoadData();
        MarketDataService.DataUpdated += OnDataUpdated;
        
        // Lire les param√®tres d'URL si n√©cessaire
        await ReadUrlParameters();
    }

    private async Task LoadData()
    {
        await Task.Delay(500); // Simulation du chargement
        
        _marketData = MarketDataService.GetAllMarketData();
        _historicalData = MarketDataService.GetHistoricalDataForSymbols(_marketData.Keys.ToArray());
        
        IsLoading = false;
        StateHasChanged();
    }

    private async Task ReadUrlParameters()
    {
        try
        {
            var uri = await JSRuntime.InvokeAsync<string>("eval", "window.location.search");
            if (uri.Contains("category="))
            {
                var categoryParam = uri.Split("category=")[1].Split("&")[0];
                if (Enum.TryParse<MarketCategory>(categoryParam, true, out var category))
                {
                    SelectedCategory = category;
                }
            }
        }
        catch
        {
            // Ignore les erreurs de parsing d'URL
        }
    }

    private void OnDataUpdated()
    {
        _marketData = MarketDataService.GetAllMarketData();
        InvokeAsync(StateHasChanged);
    }

    private void SetCategory(MarketCategory? category)
    {
        SelectedCategory = category;
        StateHasChanged();
    }

    private void SetView(string view)
    {
        CurrentView = view;
        StateHasChanged();
    }

    private void ToggleSortDirection()
    {
        SortAscending = !SortAscending;
        StateHasChanged();
    }

    private Dictionary<string, MarketData> GetFilteredData()
    {
        var data = _marketData;
        
        if (SelectedCategory.HasValue)
        {
            data = data.Where(kvp => kvp.Value.Category == SelectedCategory.Value)
                      .ToDictionary(kvp => kvp.Key, kvp => kvp.Value);
        }
        
        return data;
    }

    private Dictionary<string, MarketData> GetSortedData()
    {
        var filteredData = GetFilteredData().ToList();
        
        var sorted = SortBy switch
        {
            "price" => SortAscending 
                ? filteredData.OrderBy(kvp => kvp.Value.Price)
                : filteredData.OrderByDescending(kvp => kvp.Value.Price),
            "change" => SortAscending 
                ? filteredData.OrderBy(kvp => kvp.Value.Change)
                : filteredData.OrderByDescending(kvp => kvp.Value.Change),
            "changePercent" => SortAscending 
                ? filteredData.OrderBy(kvp => kvp.Value.ChangePercent)
                : filteredData.OrderByDescending(kvp => kvp.Value.ChangePercent),
            _ => SortAscending 
                ? filteredData.OrderBy(kvp => kvp.Value.Name)
                : filteredData.OrderByDescending(kvp => kvp.Value.Name)
        };
        
        return sorted.ToDictionary(kvp => kvp.Key, kvp => kvp.Value);
    }

    private Dictionary<string, List<ChartPoint>> GetCategoryChartData()
    {
        var filteredSymbols = GetFilteredData().Keys.ToArray();
        return _historicalData.Where(kvp => filteredSymbols.Contains(kvp.Key))
                             .ToDictionary(kvp => kvp.Key, kvp => kvp.Value);
    }

    private Dictionary<string, MarketData> GetBondData()
    {
        return _marketData.Where(kvp => kvp.Value.Category == MarketCategory.Bonds)
                         .ToDictionary(kvp => kvp.Key, kvp => kvp.Value);
    }

    private Dictionary<string, List<ChartPoint>> GetBondHistoricalData()
    {
        var bondSymbols = GetBondData().Keys.ToArray();
        return _historicalData.Where(kvp => bondSymbols.Contains(kvp.Key))
                             .ToDictionary(kvp => kvp.Key, kvp => kvp.Value);
    }

    private string GetFilterClass(MarketCategory? category)
    {
        return SelectedCategory == category ? "active" : "";
    }

    private string GetViewClass(string? view = null)
    {
        if (view != null)
        {
            return CurrentView == view ? "active" : "";
        }
        return CurrentView;
    }

    private string GetListItemClass(MarketData data)
    {
        return data.ChangePercent switch
        {
            > 0 => "positive",
            < 0 => "negative",
            _ => ""
        };
    }

    private string GetChangeClass(decimal changePercent)
    {
        return changePercent switch
        {
            > 0 => "positive",
            < 0 => "negative",
            _ => "neutral"
        };
    }

    private string GetChangePrefix(decimal changePercent)
    {
        return changePercent >= 0 ? "+" : "";
    }

    private string FormatPrice(decimal price)
    {
        return price.ToString("N2");
    }

    private string GetCategoryIcon(MarketCategory category)
    {
        return category switch
        {
            MarketCategory.Indices => "üìà",
            MarketCategory.Crypto => "‚Çø",
            MarketCategory.Commodities => "ü•á",
            MarketCategory.Bonds => "üèõÔ∏è",
            _ => "üìä"
        };
    }

    private string GetCategoryName(MarketCategory category)
    {
        return category switch
        {
            MarketCategory.Indices => "Indices",
            MarketCategory.Crypto => "Cryptomonnaies",
            MarketCategory.Commodities => "Mati√®res premi√®res",
            MarketCategory.Bonds => "Obligations",
            _ => "Autres"
        };
    }

    private string GetChartTitle()
    {
        return SelectedCategory?.ToString() switch
        {
            "Indices" => "√âvolution des indices boursiers",
            "Crypto" => "√âvolution des cryptomonnaies",
            "Commodities" => "√âvolution des mati√®res premi√®res",
            _ => "√âvolution des actifs"
        };
    }

    private string GetCategoryPerformance()
    {
        var data = GetFilteredData();
        if (!data.Any()) return "N/A";
        
        var avgPerformance = data.Values.Average(d => d.ChangePercent);
        var prefix = avgPerformance >= 0 ? "+" : "";
        return $"{prefix}{avgPerformance:F2}%";
    }

    private async Task HandleAssetClick(MarketData data)
    {
        // Ici on pourrait naviguer vers une page de d√©tail ou afficher un modal
        await Task.CompletedTask;
    }

    public void Dispose()
    {
        MarketDataService.DataUpdated -= OnDataUpdated;
    }
} 