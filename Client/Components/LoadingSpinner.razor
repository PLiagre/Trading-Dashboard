@* Composant de chargement réutilisable *@

<div class="loading-spinner-container @ContainerClass">
    <div class="loading-spinner @SpinnerClass">
        <div class="spinner-border @SpinnerSize" role="status">
            <span class="visually-hidden">Chargement...</span>
        </div>
        @if (!string.IsNullOrEmpty(Text))
        {
            <div class="loading-text">@Text</div>
        }
    </div>
</div>

<style>
    .loading-spinner-container {
        display: flex;
        align-items: center;
        justify-content: center;
        min-height: 200px;
    }

    .loading-spinner {
        text-align: center;
    }

    .loading-text {
        margin-top: 1rem;
        color: var(--text-muted);
        font-size: 0.9rem;
        font-weight: 500;
    }

    .spinner-border {
        color: var(--primary-color);
    }

    .spinner-sm {
        width: 1.5rem;
        height: 1.5rem;
    }

    .spinner-lg {
        width: 3rem;
        height: 3rem;
    }

    .loading-spinner-container.inline {
        display: inline-flex;
        min-height: auto;
        vertical-align: middle;
    }

    .loading-spinner-container.overlay {
        position: absolute;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        background: rgba(255, 255, 255, 0.9);
        z-index: 1000;
    }

    [data-theme="dark"] .loading-spinner-container.overlay {
        background: rgba(0, 0, 0, 0.8);
    }
</style>

@code {
    /// <summary>
    /// Texte à afficher sous le spinner
    /// </summary>
    [Parameter] public string? Text { get; set; }

    /// <summary>
    /// Taille du spinner (sm, lg)
    /// </summary>
    [Parameter] public string Size { get; set; } = "";

    /// <summary>
    /// Classes CSS additionnelles pour le conteneur
    /// </summary>
    [Parameter] public string ContainerClass { get; set; } = "";

    /// <summary>
    /// Classes CSS additionnelles pour le spinner
    /// </summary>
    [Parameter] public string SpinnerClass { get; set; } = "";

    /// <summary>
    /// Indique si le spinner doit être affiché en overlay
    /// </summary>
    [Parameter] public bool IsOverlay { get; set; } = false;

    /// <summary>
    /// Indique si le spinner doit être affiché en ligne
    /// </summary>
    [Parameter] public bool IsInline { get; set; } = false;

    private string SpinnerSize => Size switch
    {
        "sm" => "spinner-sm",
        "lg" => "spinner-lg",
        _ => ""
    };

    protected override void OnInitialized()
    {
        if (IsOverlay)
        {
            ContainerClass += " overlay";
        }
        else if (IsInline)
        {
            ContainerClass += " inline";
        }
    }
} 